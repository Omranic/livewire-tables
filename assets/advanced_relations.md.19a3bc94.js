import{_ as e,o as a,c as o,S as s}from"./chunks/framework.bb4748ce.js";const y=JSON.parse('{"title":"Relations","description":"","frontmatter":{},"headers":[],"relativePath":"advanced/relations.md","filePath":"advanced/relations.md"}'),t={name:"advanced/relations.md"},l=s(`<h1 id="relations" tabindex="-1">Relations <a class="header-anchor" href="#relations" aria-label="Permalink to &quot;Relations&quot;">​</a></h1><p>Relations are supported in columns and filters. They allow easy access to related models to display or filter data.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Currently, only the <code>BelongsTo</code> relation is supported.</p></div><p>The Livewire Table will search through every column and filter to see if a relation is defined. If so, it will automatically eager load the (nested) relation. The value is resolved via the models themselves.</p><p><strong>Example:</strong></p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// author.company.name</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">blog</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">author</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">company</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>This approach is used because of 2 reasons:</p><ol><li>There is no need to individually select columns except for the main table.</li><li>Defined accessors and casts in Laravel are respected when displaying the value.</li></ol><h2 id="aliasing" tabindex="-1">Aliasing <a class="header-anchor" href="#aliasing" aria-label="Permalink to &quot;Aliasing&quot;">​</a></h2><p>In order to search, sort or add where-clauses we require the tables of our related models. Tables are automatically left-joined to the dataset in order to perform these actions. Because some relations may refer to the same table, they are automatically aliased including the relation name.</p><p><strong>Example:</strong></p><p>Column <code>author.company.name</code> has the relations <code>author</code> and <code>company</code> and the column of <code>name</code>. This example will create 2 aliases:</p><ol><li><code>author</code> for the <code>users</code> table</li><li><code>author_company</code> for the <code>companies</code> table, joined on <code>users</code></li></ol><p>The column that will be used to search, sort or queried on will be <code>author_company.name</code>.</p>`,14),n=[l];function r(i,c,d,p,h,m){return a(),o("div",null,n)}const _=e(t,[["render",r]]);export{y as __pageData,_ as default};
